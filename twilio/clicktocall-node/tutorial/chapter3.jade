.step(data-title='UI: Page Structure', data-file='views/index.jade', data-highlight="3-13")
  :markdown
    ## UI: Styles

    Here on our home page, we generate an HTML page that we present to a user so they can click a button to get connected with us. To make the page a little more friendly, we include styles from [Twitter Bootstrap](http://getbootstrap.com/). We also include styles for a third-party jQuery plugin that make it easier to collect and validate international phone numbers.
.step(data-title="UI: Form", data-file='views/index.jade', data-highlight="26-39")
  :markdown
    ## UI: Form Structure

    In the body of our HTML template, we generate a form with a single text field for the user to enter their phone number. We assign unique IDs to both the form and the phone number text field, as we will need both in the JavaScript we write to submit this form. Let's take a look at that code next.


.step(data-title='UI: Phone Input', data-file='public/app.js', data-highlight="3-8")
  :markdown
    ## UI: Smart Phone Number Field

    Our click to call page makes use of a [jQuery plugin](https://github.com/Bluefieldscom/intl-tel-input) to present a nice looking, auto-validating phone number input.  Here, we tell the plugin to decorate a text field with a given ID and tell it to validate numbers as the user types.

.step(data-title='UI: Submitting Form', data-file='public/app.js', data-highlight='10-30')
  :markdown
    ## UI: Submitting the Form
    This chunk of code overrides the default form submission behavior of the HTML page to asynchronously submit the form via Ajax.

    When the form is submitted, we listen for that event in JavaScript, and cancel the default behavior in the DOM (which is to submit the form and initiate a page turn).  Next, we create an Ajax request to our back end, passing along the phone number which was entered by the user.

    When the Ajax request completes, the server sends a brief JSON response with either a success message or an error.  In the success case, we display an alert indicating the call was connected successfully.

.step(data-title='Finish')
  :markdown
    ## All Done
    Congrats! You just learned how to build a working Click-to-Call solution. To improve upon this you could add two-factor authentication to your app, or create an interactive survey to follow-up with your customer.

    Thanks for checking out this tutorial! If you have any feedback to share with us, we'd love to hear it. Tweet [@twilio](http://twitter.com/twilio) to let us know what you think.