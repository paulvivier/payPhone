.step(data-title='Controller: Setup', data-file='routes/index.js', data-highlight="1-6")
  :markdown
    ## The Node Controller - Requirements

    First, we require all of the modules we'll need to create our application. In addition to Express, we'll use a pair of middleware modules to do useful things with incoming HTTP requests to our app:

    * We use [morgan](https://www.npmjs.org/package/morgan) to give us nicer logging of HTTP requests
    * We use [body-parser](https://www.npmjs.org/package/body-parser) to serialize parameters from incoming HTTP requests into a JavaScript object we can use in our routes

    We also use the [twilio node library](https://github.com/twilio/twilio-node) to make authenticated requests to the Twilio API easier. Once we have required all of our libraries we can move on to the good stuff.
.step(data-title="Controller: Home Page", data-file='routes/index.js', data-highlight="28-31")
  :markdown
    ## Rendering the Home Page

    This route is pretty simple - for requests to the root URL of our web app, we will render a [Jade](http://jade-lang.com/) template with the HTML, CSS, and JavaScript to drive our click-to-call page.

.step(data-title='Form Post URL', data-file='routes/index.js', data-highlight="33-56")
  :markdown
    ## The Node Controller - Form Endpoint

    This route will respond to an AJAX request from the UI for our click-to-call web page, which we'll examine in a moment. Here, we use an authenticated Twilio REST API client to make an outbound phone call to the phone number that was submitted by the user. 

    For an outbound phone call, we need to specify a public URL for Twilio to request once the call has connected, so it knows what to do next. In a click to call application, these instructions could be as simple as "dial our sales number", or it could put a user into a full blown IVR system you've built.

    In this request, we assume that the domain that your app is running on is stored in the "host" header (probable in production), but you could change this to be anything. When Twilio dials out to the user, it will use the TwiML generated by the `/outbound` route, which we'll examine next.

.step(data-title='Controller: TwiML', data-file='routes/index.js', data-highlight='58-64')
  :markdown
    ## Controller - TwiML Instructions

    Before Twilio will connect a call, it needs to know what to do once the call is made. Twilio will request these instructions from your web app as an XML document, using tags that we call TwiML to tell it what to do. 

    In this route, we are going to use Jade to generate an XML document that looks like this, using the Twiml `Say` and `Dial` tags:

        <Response>
          <Say voice="alice">
            Thanks for calling [...]
          </Say>
          <!-- in a real app, you would dial your sales team or whomever -->
          <!--
          <Dial>+16515551111</Dial>
          -->
        </Response>

    That's most of the interesting bits on the back end - let's move to the front end code to see how we're collecting the phone number from the user.